{"id":"earworm-1","title":"Make sure that the bd githooks didn't interfere with the cargo-husky hooks","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-30T22:15:04.697852-04:00","updated_at":"2025-10-30T22:18:06.718289-04:00","closed_at":"2025-10-30T22:18:06.718289-04:00"}
{"id":"earworm-10","title":"Add note name display utility to common framework","description":"Add midi_note_to_name() function that converts MIDI note number to string like 'C4', 'A#3', etc. for UI display purposes.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:01.861018-04:00","updated_at":"2025-10-31T07:41:32.26218-04:00","closed_at":"2025-10-31T07:41:32.26218-04:00","dependencies":[{"issue_id":"earworm-10","depends_on_id":"earworm-4","type":"blocks","created_at":"2025-10-30T22:25:01.86142-04:00","created_by":"daemon"}]}
{"id":"earworm-11","title":"Create voice_demo.rs example","description":"Build monophonic synth example using Voice struct. Features: (1) Press A-K keys to play notes C4-B4, (2) W-O for sharps/flats, (3) Display current note name, frequency, envelope state, (4) Shows note_on/note_off behavior with proper envelope triggering. Use SineOscillator as signal source with ADSR envelope.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:02.711566-04:00","updated_at":"2025-10-31T07:40:32.944478-04:00","closed_at":"2025-10-31T07:40:32.944478-04:00","dependencies":[{"issue_id":"earworm-11","depends_on_id":"earworm-4","type":"blocks","created_at":"2025-10-30T22:25:02.711997-04:00","created_by":"daemon"}]}
{"id":"earworm-12","title":"Add tests for keyboard mapping utilities","description":"Unit tests for key_to_midi_note() and midi_note_to_name() functions. Verify correct chromatic mapping and edge cases.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:25:03.604533-04:00","updated_at":"2025-10-30T22:25:03.604533-04:00","dependencies":[{"issue_id":"earworm-12","depends_on_id":"earworm-4","type":"blocks","created_at":"2025-10-30T22:25:03.60493-04:00","created_by":"daemon"}]}
{"id":"earworm-13","title":"Document voice_demo example in README","description":"Add voice_demo to examples list in README with description of what it demonstrates and how to use it.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-30T22:25:04.470915-04:00","updated_at":"2025-10-30T22:25:04.470915-04:00","dependencies":[{"issue_id":"earworm-13","depends_on_id":"earworm-4","type":"blocks","created_at":"2025-10-30T22:25:04.47141-04:00","created_by":"daemon"}]}
{"id":"earworm-14","title":"Create voice_demo.rs example","description":"Build monophonic synth example using Voice struct. Features: (1) Press A-K keys to play notes C4-B4, (2) W-O for sharps/flats, (3) Display current note name, frequency, envelope state, (4) Shows note_on/note_off behavior with proper envelope triggering. Use SineOscillator as signal source with ADSR envelope. Depends on keyboard mapping utilities.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:12.106224-04:00","updated_at":"2025-10-31T07:42:24.674568-04:00","closed_at":"2025-10-31T07:42:24.674568-04:00","dependencies":[{"issue_id":"earworm-14","depends_on_id":"earworm-4","type":"blocks","created_at":"2025-10-30T22:25:12.106706-04:00","created_by":"daemon"}]}
{"id":"earworm-15","title":"Design VoiceAllocator API and architecture","description":"Design API for VoiceAllocator including: (1) Voice stealing strategies (oldest, quietest, lowest priority), (2) Note tracking per voice, (3) Generic over voice count, signal type, and envelope type, (4) Methods: note_on, note_off, all_notes_off, is_note_playing. Write design doc in src/music/allocator.rs comments before implementation.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:33.206485-04:00","updated_at":"2025-10-30T22:25:33.206485-04:00","dependencies":[{"issue_id":"earworm-15","depends_on_id":"earworm-5","type":"blocks","created_at":"2025-10-30T22:25:33.206998-04:00","created_by":"daemon"}]}
{"id":"earworm-16","title":"Implement VoiceAllocator struct","description":"Implement VoiceAllocator in src/music/allocator.rs with: (1) Fixed-size array of Voice instances, (2) Voice state tracking (note number, age, active status), (3) note_on() method that finds free voice or steals one, (4) note_off() method that releases specific note, (5) Generic over const VOICES, signal type S, envelope type E.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:33.829978-04:00","updated_at":"2025-10-30T22:25:33.829978-04:00","dependencies":[{"issue_id":"earworm-16","depends_on_id":"earworm-5","type":"blocks","created_at":"2025-10-30T22:25:33.830417-04:00","created_by":"daemon"}]}
{"id":"earworm-17","title":"Implement voice stealing strategies","description":"Add voice stealing to VoiceAllocator: (1) Oldest note first strategy, (2) Quietest envelope level strategy, (3) Configurable strategy enum, (4) Prefer stealing inactive voices before active ones.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:34.418717-04:00","updated_at":"2025-10-30T22:25:34.418717-04:00","dependencies":[{"issue_id":"earworm-17","depends_on_id":"earworm-5","type":"blocks","created_at":"2025-10-30T22:25:34.419156-04:00","created_by":"daemon"}]}
{"id":"earworm-18","title":"Implement Signal trait for VoiceAllocator","description":"Implement Signal trait for VoiceAllocator that mixes all active voices: (1) next_sample() sums all voice outputs, (2) Proper normalization/scaling to prevent clipping, (3) process() optimization for batch processing.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:35.028338-04:00","updated_at":"2025-10-30T22:25:35.028338-04:00","dependencies":[{"issue_id":"earworm-18","depends_on_id":"earworm-5","type":"blocks","created_at":"2025-10-30T22:25:35.028768-04:00","created_by":"daemon"}]}
{"id":"earworm-19","title":"Add comprehensive tests for VoiceAllocator","description":"Test suite covering: (1) Basic note on/off, (2) Voice stealing when exceeding limit, (3) Multiple simultaneous notes, (4) Proper voice recycling, (5) Edge cases (all voices active, rapid note changes).","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:35.899008-04:00","updated_at":"2025-10-30T22:25:35.899008-04:00","dependencies":[{"issue_id":"earworm-19","depends_on_id":"earworm-5","type":"blocks","created_at":"2025-10-30T22:25:35.899508-04:00","created_by":"daemon"}]}
{"id":"earworm-2","title":"Make sure that the bd githooks didn't interfere with the cargo-husky hooks","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-30T22:17:15.372759-04:00","updated_at":"2025-10-30T22:19:00.950069-04:00","closed_at":"2025-10-30T22:19:00.950069-04:00"}
{"id":"earworm-20","title":"Create polyphony_demo.rs example","description":"Interactive polyphonic synth example: (1) Support pressing multiple keys simultaneously, (2) Visual display showing all active voices and their notes, (3) Demonstrate voice stealing (use 4 voices, play 5+ note chord), (4) Show which voices are active/inactive, (5) Number keys 1-9 to change voice count dynamically.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:36.580893-04:00","updated_at":"2025-10-30T22:25:36.580893-04:00","dependencies":[{"issue_id":"earworm-20","depends_on_id":"earworm-5","type":"blocks","created_at":"2025-10-30T22:25:36.581325-04:00","created_by":"daemon"}]}
{"id":"earworm-21","title":"Export VoiceAllocator from music module","description":"Add VoiceAllocator to src/music/mod.rs and re-export from src/lib.rs under music feature flag.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:25:37.105492-04:00","updated_at":"2025-10-30T22:25:37.105492-04:00","dependencies":[{"issue_id":"earworm-21","depends_on_id":"earworm-5","type":"blocks","created_at":"2025-10-30T22:25:37.105929-04:00","created_by":"daemon"}]}
{"id":"earworm-22","title":"Document polyphony_demo in README","description":"Add polyphony_demo to examples section with usage instructions.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-30T22:25:37.963954-04:00","updated_at":"2025-10-30T22:25:37.963954-04:00","dependencies":[{"issue_id":"earworm-22","depends_on_id":"earworm-5","type":"blocks","created_at":"2025-10-30T22:25:37.964376-04:00","created_by":"daemon"}]}
{"id":"earworm-23","title":"Design Sequencer and Pattern API","description":"Design sequencer architecture: (1) Pattern struct with step-based note events, (2) Sequencer with tempo/BPM, (3) MusicalClock for sample-accurate timing, (4) Support for pattern looping, chaining, (5) Transport controls (play, stop, reset). Document in src/music/sequencer.rs.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:26:00.13165-04:00","updated_at":"2025-10-30T22:26:00.13165-04:00","dependencies":[{"issue_id":"earworm-23","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:00.132182-04:00","created_by":"daemon"}]}
{"id":"earworm-24","title":"Implement MusicalClock utility","description":"Implement MusicalClock in src/music/sequencer.rs: (1) Tempo in BPM, (2) Steps per beat configuration, (3) Sample-accurate step advancement, (4) Methods: tick(), current_step(), reset(), set_tempo().","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:26:00.750822-04:00","updated_at":"2025-10-30T22:26:00.750822-04:00","dependencies":[{"issue_id":"earworm-24","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:00.751277-04:00","created_by":"daemon"}]}
{"id":"earworm-25","title":"Implement Pattern struct","description":"Implement Pattern: (1) Vec of (step_index, NoteEvent) tuples, (2) Pattern length in steps, (3) Methods to add/remove events, (4) get_events_at_step() for querying, (5) Support for pattern metadata (name, description).","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:26:01.466623-04:00","updated_at":"2025-10-30T22:26:01.466623-04:00","dependencies":[{"issue_id":"earworm-25","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:01.467167-04:00","created_by":"daemon"}]}
{"id":"earworm-26","title":"Implement Sequencer struct","description":"Implement Sequencer: (1) Manages multiple patterns, (2) MusicalClock integration, (3) play(), stop(), reset() methods, (4) Pattern switching, (5) Event callback/iterator for triggered notes at each step.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:26:02.041683-04:00","updated_at":"2025-10-30T22:26:02.041683-04:00","dependencies":[{"issue_id":"earworm-26","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:02.042145-04:00","created_by":"daemon"}]}
{"id":"earworm-27","title":"Add tests for sequencer components","description":"Test suite: (1) MusicalClock timing accuracy, (2) Pattern event retrieval, (3) Sequencer playback behavior, (4) Tempo changes, (5) Pattern looping and transitions.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:26:03.139786-04:00","updated_at":"2025-10-30T22:26:03.139786-04:00","dependencies":[{"issue_id":"earworm-27","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:03.140226-04:00","created_by":"daemon"}]}
{"id":"earworm-28","title":"Create sequencer_demo.rs example","description":"Interactive sequencer demo: (1) Pre-programmed patterns (bass, melody, chords), (2) SPACE to play/stop, (3) Number keys to switch patterns, (4) Visual step indicator and current notes, (5) Display tempo and current step. Uses VoiceAllocator for polyphonic playback.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-30T22:26:04.126734-04:00","updated_at":"2025-10-30T22:26:04.126734-04:00","dependencies":[{"issue_id":"earworm-28","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:04.127168-04:00","created_by":"daemon"}]}
{"id":"earworm-29","title":"Add step display utility to common framework","description":"Add draw_step_grid() helper to examples/common/mod.rs: displays pattern as grid with current step highlighted. Useful for sequencer visualizations.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:04.923642-04:00","updated_at":"2025-10-30T22:26:04.923642-04:00","dependencies":[{"issue_id":"earworm-29","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:04.924083-04:00","created_by":"daemon"}]}
{"id":"earworm-3","title":"Music Module Implementation","description":"Complete implementation of the music module including Voice demonstrations, polyphony system, sequencer, music theory utilities, and wavetable synthesis. Each phase includes both feature implementation and example demonstrations.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-30T22:24:33.909641-04:00","updated_at":"2025-10-30T22:24:33.909641-04:00"}
{"id":"earworm-30","title":"Export Sequencer and Pattern from music module","description":"Add Sequencer, Pattern, MusicalClock to src/music/mod.rs and re-export from src/lib.rs.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:05.564848-04:00","updated_at":"2025-10-30T22:26:05.564848-04:00","dependencies":[{"issue_id":"earworm-30","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:05.565297-04:00","created_by":"daemon"}]}
{"id":"earworm-31","title":"Document sequencer_demo in README","description":"Add sequencer_demo to examples with description of features and controls.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-30T22:26:06.279797-04:00","updated_at":"2025-10-30T22:26:06.279797-04:00","dependencies":[{"issue_id":"earworm-31","depends_on_id":"earworm-6","type":"blocks","created_at":"2025-10-30T22:26:06.280259-04:00","created_by":"daemon"}]}
{"id":"earworm-32","title":"Design Scale and Chord API","description":"Design music theory API: (1) Scale enum (Major, Minor, Dorian, etc.), (2) Scale::notes() method returning Vec of intervals, (3) ChordQuality enum (Major, Minor, Dim, Aug, 7th variations), (4) ChordBuilder for constructing chords from root + quality. Document in src/music/theory.rs.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:24.727255-04:00","updated_at":"2025-10-30T22:26:24.727255-04:00","dependencies":[{"issue_id":"earworm-32","depends_on_id":"earworm-7","type":"blocks","created_at":"2025-10-30T22:26:24.727759-04:00","created_by":"daemon"}]}
{"id":"earworm-33","title":"Implement Scale enum and methods","description":"Implement Scale in src/music/theory.rs: (1) Common scales (Major, Natural Minor, Harmonic Minor, Melodic Minor, Dorian, Phrygian, Lydian, Mixolydian, Pentatonic Major/Minor), (2) notes() method returning interval pattern, (3) get_notes(root) method returning actual Note values.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:25.416313-04:00","updated_at":"2025-10-30T22:26:25.416313-04:00","dependencies":[{"issue_id":"earworm-33","depends_on_id":"earworm-7","type":"blocks","created_at":"2025-10-30T22:26:25.416802-04:00","created_by":"daemon"}]}
{"id":"earworm-34","title":"Implement ChordQuality and ChordBuilder","description":"Implement chord construction: (1) ChordQuality enum (Major, Minor, Diminished, Augmented, Major7, Minor7, Dominant7, etc.), (2) ChordBuilder::new(root, quality), (3) .build() returns Vec of Notes, (4) Support for inversions and extensions.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:26.220617-04:00","updated_at":"2025-10-30T22:26:26.220617-04:00","dependencies":[{"issue_id":"earworm-34","depends_on_id":"earworm-7","type":"blocks","created_at":"2025-10-30T22:26:26.221064-04:00","created_by":"daemon"}]}
{"id":"earworm-35","title":"Add music theory tests","description":"Test suite: (1) Verify scale interval patterns, (2) Chord construction correctness, (3) Common progressions (I-IV-V in C major), (4) Edge cases (different octaves, chromatic notes).","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:26.898582-04:00","updated_at":"2025-10-30T22:26:26.898582-04:00","dependencies":[{"issue_id":"earworm-35","depends_on_id":"earworm-7","type":"blocks","created_at":"2025-10-30T22:26:26.899033-04:00","created_by":"daemon"}]}
{"id":"earworm-36","title":"Create scale_explorer.rs example","description":"Interactive scale/chord explorer: (1) Number keys select root note (C-B), (2) Letter keys select scale type, (3) SPACE to play ascending scale with sequencer, (4) 'C' key to play chord progression (I-IV-V-I), (5) Display current scale notes and intervals.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:27.94273-04:00","updated_at":"2025-10-30T22:26:27.94273-04:00","dependencies":[{"issue_id":"earworm-36","depends_on_id":"earworm-7","type":"blocks","created_at":"2025-10-30T22:26:27.943139-04:00","created_by":"daemon"}]}
{"id":"earworm-37","title":"Export Scale and Chord types from music module","description":"Add Scale, ChordQuality, ChordBuilder to src/music/mod.rs and re-export from src/lib.rs.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-30T22:26:28.600199-04:00","updated_at":"2025-10-30T22:26:28.600199-04:00","dependencies":[{"issue_id":"earworm-37","depends_on_id":"earworm-7","type":"blocks","created_at":"2025-10-30T22:26:28.600625-04:00","created_by":"daemon"}]}
{"id":"earworm-38","title":"Document scale_explorer in README","description":"Add scale_explorer example to README with usage instructions.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-30T22:26:29.216711-04:00","updated_at":"2025-10-30T22:26:29.216711-04:00","dependencies":[{"issue_id":"earworm-38","depends_on_id":"earworm-7","type":"blocks","created_at":"2025-10-30T22:26:29.217168-04:00","created_by":"daemon"}]}
{"id":"earworm-39","title":"Design WavetableOscillator API","description":"Design wavetable architecture: (1) WavetableOscillator generic over SAMPLE_RATE, (2) Support for arbitrary waveform samples, (3) Interpolation modes (linear, cubic), (4) Implements AudioSignal and Pitched traits, (5) Methods for loading waveforms. Document in src/synthesis/oscillators/wavetable.rs.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:49.874593-04:00","updated_at":"2025-10-30T22:26:49.874593-04:00","dependencies":[{"issue_id":"earworm-39","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:49.875111-04:00","created_by":"daemon"}]}
{"id":"earworm-4","title":"Phase 1: Voice Example \u0026 Framework Foundation","description":"Demonstrate existing Voice functionality and establish patterns for musical examples. Includes keyboard-to-note mapping and basic interactive music example patterns.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-30T22:24:43.227098-04:00","updated_at":"2025-10-30T22:24:43.227098-04:00","dependencies":[{"issue_id":"earworm-4","depends_on_id":"earworm-3","type":"blocks","created_at":"2025-10-30T22:24:43.227568-04:00","created_by":"daemon"}]}
{"id":"earworm-40","title":"Implement WavetableOscillator struct","description":"Implement WavetableOscillator: (1) Store wavetable as Vec of f64 samples, (2) Phase accumulator for playback position, (3) Frequency control via phase increment, (4) Linear interpolation between samples, (5) Proper phase wrapping.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:50.568931-04:00","updated_at":"2025-10-30T22:26:50.568931-04:00","dependencies":[{"issue_id":"earworm-40","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:50.5694-04:00","created_by":"daemon"}]}
{"id":"earworm-41","title":"Add interpolation modes to WavetableOscillator","description":"Implement interpolation: (1) InterpolationMode enum (None/Nearest, Linear, Cubic), (2) Linear interpolation (default), (3) Cubic interpolation for higher quality, (4) Configurable via builder method.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:51.404398-04:00","updated_at":"2025-10-30T22:26:51.404398-04:00","dependencies":[{"issue_id":"earworm-41","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:51.404853-04:00","created_by":"daemon"}]}
{"id":"earworm-42","title":"Add wavetable generation utilities","description":"Helper functions in wavetable module: (1) generate_sine_table(), (2) generate_saw_table(), (3) generate_square_table(), (4) from_function(size, fn), (5) Configurable table size (power of 2 recommended).","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:52.353132-04:00","updated_at":"2025-10-30T22:26:52.353132-04:00","dependencies":[{"issue_id":"earworm-42","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:52.35357-04:00","created_by":"daemon"}]}
{"id":"earworm-43","title":"Implement AudioSignal and Pitched for WavetableOscillator","description":"Trait implementations: (1) AudioSignal (uses const SAMPLE_RATE), (2) Pitched (frequency(), set_frequency()), (3) Oscillator trait for consistency with other oscillators.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:53.002269-04:00","updated_at":"2025-10-30T22:26:53.002269-04:00","dependencies":[{"issue_id":"earworm-43","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:53.002696-04:00","created_by":"daemon"}]}
{"id":"earworm-44","title":"Add comprehensive wavetable tests","description":"Test suite: (1) Wavetable playback accuracy, (2) Frequency changes, (3) Interpolation quality, (4) Phase wrapping, (5) Comparison with analytical oscillators.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:53.827538-04:00","updated_at":"2025-10-30T22:26:53.827538-04:00","dependencies":[{"issue_id":"earworm-44","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:53.827995-04:00","created_by":"daemon"}]}
{"id":"earworm-45","title":"Create wavetable_demo.rs example","description":"Interactive wavetable demo: (1) Number keys switch between different wavetables (sine, saw, square, custom), (2) Show interpolation mode switching, (3) Display current wavetable type and size, (4) Compare quality vs analytical oscillators (A/B comparison mode).","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-30T22:26:55.055967-04:00","updated_at":"2025-10-30T22:26:55.055967-04:00","dependencies":[{"issue_id":"earworm-45","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:55.056415-04:00","created_by":"daemon"}]}
{"id":"earworm-46","title":"Export WavetableOscillator from synthesis module","description":"Add WavetableOscillator to src/synthesis/oscillators/mod.rs and re-export from src/lib.rs.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-30T22:26:55.899675-04:00","updated_at":"2025-10-30T22:26:55.899675-04:00","dependencies":[{"issue_id":"earworm-46","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:55.900051-04:00","created_by":"daemon"}]}
{"id":"earworm-47","title":"Document wavetable_demo in README","description":"Add wavetable_demo to examples section in README.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-30T22:26:56.658173-04:00","updated_at":"2025-10-30T22:26:56.658173-04:00","dependencies":[{"issue_id":"earworm-47","depends_on_id":"earworm-8","type":"blocks","created_at":"2025-10-30T22:26:56.658586-04:00","created_by":"daemon"}]}
{"id":"earworm-48","title":"Add pre-commit check: cargo run --example for all new examples","description":"Problem: New examples are committed without verifying they actually run. Created examples may have feature dependency issues not caught by cargo build --examples --all-features. Solution: Update pre-commit workflow to require running each new example added in the PR/commit. This ensures examples work in isolation, not just with --all-features.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-31T07:57:25.875978-04:00","updated_at":"2025-10-31T10:26:53.741-04:00","closed_at":"2025-10-31T10:26:53.741-04:00"}
{"id":"earworm-49","title":"Document example development workflow in CLAUDE.md","description":"Add explicit steps to CLAUDE.md for creating new examples: (1) Create example file, (2) Add [[example]] section to Cargo.toml with required-features if needed, (3) Run 'cargo run --example \u003cname\u003e' to verify it works standalone, (4) Document usage in README. This prevents feature dependency issues.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-31T07:57:26.806332-04:00","updated_at":"2025-10-31T10:26:53.696156-04:00","closed_at":"2025-10-31T10:26:53.696156-04:00"}
{"id":"earworm-5","title":"Phase 2: Polyphony System","description":"Voice allocation system for polyphonic synthesis with voice stealing and multi-voice management.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-30T22:24:43.80742-04:00","updated_at":"2025-10-30T22:24:43.80742-04:00","dependencies":[{"issue_id":"earworm-5","depends_on_id":"earworm-3","type":"blocks","created_at":"2025-10-30T22:24:43.807927-04:00","created_by":"daemon"}]}
{"id":"earworm-50","title":"Add script to test all examples can run","description":"Create a test script (scripts/test-examples.sh) that iterates through all examples and verifies each one at least starts (runs for 1-2 seconds without crashing). This catches runtime issues that cargo build misses. Should be part of CI and pre-commit checks.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-31T07:57:28.282778-04:00","updated_at":"2025-10-31T10:26:53.719159-04:00","closed_at":"2025-10-31T10:26:53.719159-04:00"}
{"id":"earworm-6","title":"Phase 3: Sequencer System","description":"Pattern-based sequencer with tempo/BPM control and step-based note scheduling.","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-30T22:24:44.482868-04:00","updated_at":"2025-10-30T22:24:44.482868-04:00","dependencies":[{"issue_id":"earworm-6","depends_on_id":"earworm-3","type":"blocks","created_at":"2025-10-30T22:24:44.483311-04:00","created_by":"daemon"}]}
{"id":"earworm-7","title":"Phase 4: Music Theory Utilities","description":"Scale and chord construction utilities for generative and educational music applications.","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-30T22:24:45.219034-04:00","updated_at":"2025-10-30T22:24:45.219034-04:00","dependencies":[{"issue_id":"earworm-7","depends_on_id":"earworm-3","type":"blocks","created_at":"2025-10-30T22:24:45.2195-04:00","created_by":"daemon"}]}
{"id":"earworm-8","title":"Phase 5: Wavetable Synthesis","description":"Wavetable oscillator for sample-based synthesis with arbitrary waveforms.","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-30T22:24:45.936084-04:00","updated_at":"2025-10-30T22:24:45.936084-04:00","dependencies":[{"issue_id":"earworm-8","depends_on_id":"earworm-3","type":"blocks","created_at":"2025-10-30T22:24:45.936576-04:00","created_by":"daemon"}]}
{"id":"earworm-9","title":"Add keyboard-to-note mapping utility to common framework","description":"Add key_to_midi_note() function in examples/common/mod.rs that maps computer keyboard keys (A-K, W-O row) to MIDI notes in chromatic scale. Maps like piano keyboard: A=C4, W=C#4, S=D4, etc.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-30T22:25:00.808716-04:00","updated_at":"2025-10-31T07:41:12.051489-04:00","closed_at":"2025-10-31T07:41:12.051489-04:00","dependencies":[{"issue_id":"earworm-9","depends_on_id":"earworm-4","type":"blocks","created_at":"2025-10-30T22:25:00.809201-04:00","created_by":"daemon"}]}
